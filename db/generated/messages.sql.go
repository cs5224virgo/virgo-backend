// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: messages.sql

package sqlc

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (content, type, user_id, room_id)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, updated_at, deleted_at, content, type, user_id, room_id
`

type CreateMessageParams struct {
	Content string
	Type    MessageType
	UserID  int32
	RoomID  int32
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.Content,
		arg.Type,
		arg.UserID,
		arg.RoomID,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Content,
		&i.Type,
		&i.UserID,
		&i.RoomID,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
UPDATE messages
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getLatestMessageByRoomID = `-- name: GetLatestMessageByRoomID :one
SELECT id, created_at, updated_at, deleted_at, content, type, user_id, room_id
FROM messages
WHERE room_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLatestMessageByRoomID(ctx context.Context, roomID int32) (Message, error) {
	row := q.db.QueryRowContext(ctx, getLatestMessageByRoomID, roomID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Content,
		&i.Type,
		&i.UserID,
		&i.RoomID,
	)
	return i, err
}

const getMessagesByRoomCode = `-- name: GetMessagesByRoomCode :many
SELECT m.id, m.created_at, m.updated_at, m.deleted_at, m.content, m.type, m.user_id, m.room_id
FROM messages m
JOIN rooms r ON m.room_id = r.id
WHERE r.code = $1 AND m.deleted_at IS NULL
ORDER BY m.created_at ASC
`

func (q *Queries) GetMessagesByRoomCode(ctx context.Context, code string) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByRoomCode, code)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Content,
			&i.Type,
			&i.UserID,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByRoomID = `-- name: GetMessagesByRoomID :many
SELECT id, created_at, updated_at, deleted_at, content, type, user_id, room_id
FROM messages
WHERE room_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
LIMIT $2
`

type GetMessagesByRoomIDParams struct {
	RoomID int32
	Limit  int32
}

func (q *Queries) GetMessagesByRoomID(ctx context.Context, arg GetMessagesByRoomIDParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByRoomID, arg.RoomID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Content,
			&i.Type,
			&i.UserID,
			&i.RoomID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :exec
UPDATE messages
SET content = $2, type = $3, updated_at = NOW()
WHERE id = $1
`

type UpdateMessageParams struct {
	ID      int32
	Content string
	Type    MessageType
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) error {
	_, err := q.db.ExecContext(ctx, updateMessage, arg.ID, arg.Content, arg.Type)
	return err
}
